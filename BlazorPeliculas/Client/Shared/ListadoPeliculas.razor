@inject IJSRuntime js
<h3>Listado Peliculas</h3>
<input type="checkbox" @bind="@MostrarBotones" />
@*<input type="checkbox" @onchange="@(() => MostrarBotones = !MostrarBotones)" />*@

<div style="display: flex; flex-wrap: wrap; align-content:center;">
    <ListadoGenerico Listado="Peliculas">
        <HayRegistros Context="pelicula">
            <PeliculaIndividual Pelicula="pelicula" EliminarPelicula="EliminarPelicula"
                                MostrarBotones="MostrarBotones" />
        </HayRegistros>
    </ListadoGenerico>
</div>

<Confirmacion @ref="confirmacion" onConfirm="EliminarPeliculaConConfirmacion" 
              onCancel="onCancelConfirmacion">
    <div>Desea borra la peli?</div>
</Confirmacion>

@*@foreach (var pelicula in Peliculas)
    {
        <PeliculaIndividual Pelicula="pelicula" EliminarPelicula="EliminarPelicula"
                            MostrarBotones="MostrarBotones" />
    }*@

@*@for (var i = 0; i < Peliculas.Count; i++)
    {
        <div>
            @if (i == Peliculas.Count - 1)
            {
                <p>Esta es la última película</p>
            }
            <p>@(i + 1)) Título: @((MarkupString)Peliculas[i].Titulo)</p>
            <p>Fecha Lanzamiento: <b>@Peliculas[i].Lanzamiento.ToString("dd MMM yyyy")</b></p>
        </div>
    }*@

@code {

    Confirmacion confirmacion;
    [Parameter] public List<Pelicula> Peliculas { get; set; }
    //[Parameter] public RenderFragment Cargando { get; set; }
    //[Parameter] public RenderFragment NoHayRegistros { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine("oninicialized");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet");
    }

    protected override void OnAfterRender(bool firstRender)

    {
        Console.WriteLine($"OnAfterRender: primera vez: {firstRender}");
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("OnParametersSet");
        return true;
    }

    bool MostrarBotones = false;

    async Task EliminarPelicula(Pelicula pelicula)
    {
        confirmacion.Mostrar();
        peliculaABorrar = pelicula;
        ////var confirmado = await js.InvokeAsync<bool>("confirm", $"Desea borrar{pelicula.Titulo}");
        //var confirmado = await js.Confirm($"Desea borrar{pelicula.Titulo}");
        //if (confirmado)
        //{
        //    Peliculas.Remove(pelicula);
        //    Console.WriteLine($"Se ha Eliminado la película  { pelicula.Titulo}");
        //}

    }

    Pelicula peliculaABorrar;

    void EliminarPeliculaConConfirmacion() {
        Peliculas.Remove(peliculaABorrar);
        confirmacion.Ocultar();
        peliculaABorrar = null;
    }

    void onCancelConfirmacion()
    {
        confirmacion.Ocultar();
        peliculaABorrar = null;
    }
    //protected override async Task OnInitializedAsync()
    //{
    //    //await Task.Delay(3000);
    //    Peliculas = ObtenerPeliculas();
    //}

}
